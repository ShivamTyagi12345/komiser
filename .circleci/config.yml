version: 2.1
jobs:
  build_frontend:
    docker:
      - image: circleci/node:14.15-stretch-browsers
    working_directory: ~/komiser
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          key: node-modules-{{checksum "dashboard/package.json"}}
      - run:
          name: Install dependencies
          command: cd dashboard && npm install
      - save_cache:
          key: node-modules-{{checksum "dashboard/package.json"}}
          paths:
            - dashboard/node_modules
      - run:
          name: Build artifact
          command: cd dashboard && npm run build
      - persist_to_workspace:
          root: dashboard
          paths:
            - out
  build_cli:
    docker:
      - image: golang:1.19.3
    working_directory: /go/src/github.com/tailwarden/komiser
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/dashboard
      - run:
          name: Install dependencies
          command: |
            go mod download
      - run:
          name: Install go-bin-data
          command: |
           go install -a -v github.com/go-bindata/go-bindata/...@latest
           go install -v github.com/elazarl/go-bindata-assetfs/...
      - run:
         name: Fix path
         command: mv /tmp/dashboard/out .
      #- run:
         #name: Skip creating assets for now
         #command: |
          #  go-bindata-assetfs -o internal/api/v1/template.go out/...
           # sed -i -e 's/package main/package v1/g' internal/api/v1/template.go
      - run:
         name: Build binary
         command:
            curl -sfL https://goreleaser.com/static/run | bash
      - run:
         name: Install AWS CLI
         command: |
          apt-get update
          apt-get install -y awscli
      - run:
          name: Push Linux binaries
          command: |
            aws s3 cp dist/komiser_linux_amd64_v1/komiser s3://komiser-releases/v3.0.1/linux/amd64/komiser --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
            aws s3 cp dist/komiser_linux_arm64/komiser s3://komiser-releases/v3.0.1/linux/arm64/komiser --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
      - run:
          name: Push Windows binaries
          command: |
            aws s3 cp dist/komiser_windows_arm64/komiser.exe s3://komiser-releases/v3.0.1/windows/arm64/komiser --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
            aws s3 cp dist/komiser_windows_amd64_v1/komiser.exe s3://komiser-releases/v3.0.1/windows/amd64/komiser --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
      - run:
          name: Push Mac OS X binaries
          command: |
            aws s3 cp dist/komiser_darwin_amd64_v1/komiser s3://komiser-releases/v3.0.1/darwin/amd64/komiser --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
            aws s3 cp dist/komiser_darwin_arm64/komiser s3://komiser-releases/v3.0.1/darwin/arm64/komiser --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
            aws cloudfront create-invalidation --distribution-id ERO8W9KAFNCBV --paths "/*"

  build_docker:
    docker:
       - image: docker:20.10.17
    resource_class: large
    steps:
        - checkout
        - setup_remote_docker
        - run:
            name: Build & Push Komiser Docker Image
            command: |
                docker context create tls-env
                docker buildx create tls-env --use
                docker login -u$DOCKERHUB_LOGIN -p$DOCKERHUB_PASSWORD
                docker buildx build --push --platform linux/amd64,linux/arm64 -t tailwarden/komiser:latest -t tailwarden/komiser:${CIRCLE_SHA1} -t tailwarden/komiser:3.0.0 .

workflows:
    version: 2
    build_and_deploy:
        jobs:
            - build_frontend:
                filters:
                    branches:
                        only:
                            - master
            - build_cli:
                requires:
                    - build_frontend
                filters:
                    branches:
                        only:
                            - master
            - build_docker:
                requires:
                    - build_cli
                filters:
                    branches:
                        only:
                            - master